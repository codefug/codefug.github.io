1:"$Sreact.fragment"
2:I[1152,["893","static/chunks/893-1af1c230473151df.js","460","static/chunks/460-7903e3149ee4c004.js","252","static/chunks/252-c4d5671b15cb4929.js","203","static/chunks/203-05217b8f6621587d.js","843","static/chunks/843-bbd2e2ac43df39f2.js","177","static/chunks/app/layout-9250f22f01bbf6c6.js"],"GoogleTagManager"]
3:I[4953,["893","static/chunks/893-1af1c230473151df.js","460","static/chunks/460-7903e3149ee4c004.js","252","static/chunks/252-c4d5671b15cb4929.js","203","static/chunks/203-05217b8f6621587d.js","843","static/chunks/843-bbd2e2ac43df39f2.js","177","static/chunks/app/layout-9250f22f01bbf6c6.js"],"default"]
4:I[3777,["893","static/chunks/893-1af1c230473151df.js","460","static/chunks/460-7903e3149ee4c004.js","252","static/chunks/252-c4d5671b15cb4929.js","203","static/chunks/203-05217b8f6621587d.js","843","static/chunks/843-bbd2e2ac43df39f2.js","177","static/chunks/app/layout-9250f22f01bbf6c6.js"],"SidebarProvider"]
5:I[3577,["893","static/chunks/893-1af1c230473151df.js","460","static/chunks/460-7903e3149ee4c004.js","252","static/chunks/252-c4d5671b15cb4929.js","203","static/chunks/203-05217b8f6621587d.js","843","static/chunks/843-bbd2e2ac43df39f2.js","177","static/chunks/app/layout-9250f22f01bbf6c6.js"],"default"]
6:I[5440,["893","static/chunks/893-1af1c230473151df.js","460","static/chunks/460-7903e3149ee4c004.js","252","static/chunks/252-c4d5671b15cb4929.js","203","static/chunks/203-05217b8f6621587d.js","843","static/chunks/843-bbd2e2ac43df39f2.js","177","static/chunks/app/layout-9250f22f01bbf6c6.js"],"default"]
7:I[2329,[],""]
8:I[3725,[],""]
9:I[6252,["252","static/chunks/252-c4d5671b15cb4929.js","345","static/chunks/app/not-found-510f3dec4e3d85ef.js"],""]
a:I[9816,["507","static/chunks/app/posts/%5Bid%5D/layout-40b38b2a946b4cd6.js"],"default"]
c:I[2207,[],"MetadataBoundary"]
e:I[2207,[],"OutletBoundary"]
11:I[2533,[],"AsyncMetadataOutlet"]
13:I[4893,["893","static/chunks/893-1af1c230473151df.js","460","static/chunks/460-7903e3149ee4c004.js","252","static/chunks/252-c4d5671b15cb4929.js","880","static/chunks/app/posts/%5Bid%5D/page-a9de55f97c60b056.js"],"Image"]
14:I[2207,[],"ViewportBoundary"]
16:I[923,["219","static/chunks/app/global-error-b850cc9c33842b8e.js"],"default"]
:HL["https://codefug.github.io/_next/static/media/518331124efecf5c-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["https://codefug.github.io/_next/static/css/560594e4c790f86c.css","style"]
:HL["https://codefug.github.io/_next/static/css/7b1838e6bdc2260c.css","style"]
:HL["https://codefug.github.io/_next/static/css/fc37ac2b1a278e8c.css","style"]
0:{"P":null,"b":"sdIO8H-gwQKLcESnkx9D8","p":"https://codefug.github.io","c":["","posts","2025-06-14"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2025-06-14","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"https://codefug.github.io/_next/static/css/560594e4c790f86c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"https://codefug.github.io/_next/static/css/7b1838e6bdc2260c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","$L2",null,{"gtmId":"$undefined"}],["$","body",null,{"className":"__className_7ee20e antialiased","children":["$","$L3",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$L4",null,{"defaultOpen":false,"children":[["$","$L5",null,{"totalFrontMatterList":[{"id":"2025-06-14","title":"해시","excerpt":"JS의 해시에 대해서 알아보자.","date":"2025-06-14","categories":["data-structure","javascript"],"header":{"teaser":"/images/2025-06-14/Pasted image 20250617224108.png"}},{"id":"2025-06-07","title":"큐","excerpt":"JS의 큐에 대해서 알아보자.","date":"2025-06-07","categories":["data-structure","javascript"],"header":{"teaser":"/images/2025-06-07/Pasted image 20250617212028.png"}},{"id":"2025-05-31","title":"스택","excerpt":"JS의 스택에 대해서 알아보자.","date":"2025-05-31","categories":["data-structure","javascript"],"header":{"teaser":"/images/2025-05-31/Pasted image 20250617080823.png"}},{"id":"2025-05-24","title":"배열","excerpt":"JS의 배열에 대해서 알아보자.","date":"2025-05-24","categories":["data-structure","javascript"],"header":{"teaser":"/images/2025-05-24/Pasted image 20250615181200.png"}},{"id":"2024-11-10","title":"Asynchronous JavaScript","excerpt":"microtask queue, macrotask queue, call stack, web api와 관련된 비동기 동작 방식, 비동기 관련 역사와 비동기 코드의 다양한 활용법들을 알아보자.","date":"2024-11-10","categories":["javascript"],"header":{"teaser":"/images/logos/JS.svg"}},{"id":"2024-09-14-4","title":"(꼼꼼 프로젝트) streaming 방식의 tanstack query","excerpt":"infinite scroll, optimistic update 그리고 streaming 방식이 결합된 쿼리 처리 ( useSuspenseQuery, useSuspenseInfiniteQuery )","date":"2024-09-14","categories":["kkom-kkom"],"header":{"teaser":"/images/logos/tanstackQuery.png"}},{"id":"2024-09-14-3","title":"(꼼꼼 프로젝트) 클라이언트와 서버 둘다 호환되는 fetch 구현","excerpt":"서버 액션을 활용한 refresh token rotation, 커링 함수를 이용한 리팩토링","date":"2024-09-14","categories":["kkom-kkom"],"header":{"teaser":"/images/logos/fetch.png"}},{"id":"2024-09-14-2","title":"(꼼꼼 프로젝트) startTransition, progress bar 구현에 대한 고민","excerpt":"progress bar 로직 연구하기(startTransition), next-nprogress-bar","date":"2024-09-14","categories":["kkom-kkom"],"header":{"teaser":"/images/logos/nprogress.png"}},{"id":"2024-09-14-1","title":"(꼼꼼 프로젝트) toss slash 분석, zustand와 연결된 커스텀 overlay 훅 구현","excerpt":"stacking context, compound pattern, 전역 상태를 활용한다는 것의 의미, 토스 개발자 실력 흡수하기","date":"2024-09-14","categories":["kkom-kkom"],"header":{"teaser":"/images/logos/toss.png"}},{"id":"2024-09-11","title":"(꼼꼼 프로젝트) 공통 버튼 컴포넌트의 종류를 쉽게 관리하고 누구나 쉽게 확인할 수 있게 하는 방법","excerpt":"tailwind로 조건부 처리를 간편하게 하는 방법, 비개발자도 스타일을 쉽게 확인할 수 있도록 storybook 연동","date":"2024-09-11","categories":["kkom-kkom"],"header":{"teaser":"/images/logos/storybook.png"}},{"id":"2024-07-22-2","title":"(급페이 프로젝트) 개발환경에만 집중하기 위한 여정","excerpt":"접근 제한을 위한 미들웨어 처리, vercel CLI을 이용한 organization 무료 자동 배포, 프리뷰","date":"2024-07-22","categories":["gheuppay"],"header":{"teaser":"/images/logos/vercel.png"}},{"id":"2024-07-22-1","title":"(급페이 프로젝트) 알림창 무한 스크롤을 위한 여정 (mock fetching을 위한 MSW 도입기)","excerpt":"msw를 활용해서 프론트엔드 개발이 다 되어있지 않은 상태에서도 무한 스크롤 구현을 확인할 수 있게 되었습니다.","date":"2024-07-22","categories":["gheuppay"],"header":{"teaser":"/images/logos/msw.png"}},{"id":"2024-07-21","title":"(급페이 프로젝트) 카드 렌더링을 최적화하여 UX를 향상시키기 위한 머나먼 여정","excerpt":"server component 설계를 이용한 suspense 적극 활용, 이를 위해서 next cookie를 사용하면서 겪은 문제들을 적은 글입니다.","date":"2024-07-21","categories":["gheuppay"],"header":{"teaser":"/images/logos/next-cookie.png"}},{"id":"2024-06-18","title":"React Testing","excerpt":"React Testing Library, Vitest, Jest","date":"2024-06-18","categories":["reactdeepdive"],"header":{"teaser":"/images/logos/reactdeepdive.jpg"}},{"id":"2024-06-17","title":"로그인 구현 (zustand, zod + react-hook-form, RTR)","excerpt":"zustand를 이용한 로그인 상태 전역 관리, zod를 이용한 간단한 스키마 전개, react-hook-form을 이용한 간단한 validation, axios를 이용한 간단한 api 요청 처리","date":"2024-06-17","categories":["react"],"header":{"teaser":"/images/logos/zod.png"}},{"id":"2024-06-15","title":"Dev tool","excerpt":"리액트 과거, 현재, 미래","date":"2024-06-15","categories":["web"],"header":{"teaser":"/images/logos/reactdeepdive.jpg"}},{"id":"2024-06-14","title":"마이그레이션 중 발생한 Vite 환경 변수 처리","excerpt":"Vite_ENV","date":"2024-06-14","categories":["react"],"header":{"teaser":"/images/logos/react.png"}},{"id":"2024-06-10","title":"React Debugging","excerpt":"react-dev-tools 정리, 실습","date":"2024-06-10","categories":["react"],"header":{"teaser":"/images/logos/react.png"}},{"id":"2024-06-08","title":"자잘한 Next.js 트러블 슈팅들","excerpt":"react-responsive를 사용하지 못하는 상황, dotenv 사용시 문제 발생","date":"2024-06-08","categories":["nextjs"],"header":{"teaser":"/images/logos/Nextjs.png"}},{"id":"2024-05-31","title":"Next는 왜 쓸까","excerpt":"CSR SSG SSR","date":"2024-05-31","categories":["nextjs"],"header":{"teaser":"/images/logos/Nextjs.png"}},{"id":"2024-05-23","title":"리액트는 왜 쓸까","excerpt":"리액트 과거, 현재, 미래","date":"2024-05-23","categories":["react"],"header":{"teaser":"/images/logos/reactdeepdive.jpg"}},{"id":"2024-05-22","title":"TS는 왜 쓸까 (위대한 TS)","excerpt":"JS를 완벽하게 하기 위한 여정","date":"2024-05-22","categories":["typescript"],"header":{"teaser":"/images/logos/TS.png"}},{"id":"2024-05-20","title":"Fandom-k 프로젝트 회고3","excerpt":"Github Actions, 최종 결과","date":"2024-05-20","categories":["fandomk"],"header":{"teaser":"/images/logos/githubActions.png"}},{"id":"2024-05-19","title":"Fandom-k 프로젝트 회고2","excerpt":"fetch, scroll to Top, infinite scroll 라이브러리 제거","date":"2024-05-19","categories":["fandomk"],"header":{"teaser":"/images/logos/fetch.png"}},{"id":"2024-05-18","title":"Fandom-k 프로젝트 회고1","excerpt":"팀 프로젝트 세팅, infinite scroll, skeleton","date":"2024-05-18","categories":["fandomk"],"header":{"teaser":"/images/logos/infinite-scroll.png"}}]}],["$","$L6",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"children":[["$","h2",null,{"children":"Not Found"}],["$","p",null,{"children":"잘못된 페이지에요!"}],["$","$L9",null,{"href":"/","children":"홈으로 돌아가기"}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]}]}]]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L7",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","2025-06-14","d"],["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"https://codefug.github.io/_next/static/css/fc37ac2b1a278e8c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","div",null,{"className":"prose mx-auto mb-10 overflow-auto dark:prose-invert","children":[["$","$L7",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}],["$","$La",null,{}]]}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$Lb",["$","$Lc",null,{"children":"$Ld"}],null,["$","$Le",null,{"children":["$Lf","$L10",["$","$L11",null,{"promise":"$@12"}]]}]]}],{},null,false]},null,false]},null,false]},[["$","div","l",{"className":"flex h-full items-center justify-center","children":["$","div",null,{"className":"flex flex-col items-center","children":[["$","div",null,{"className":"scale-[1.15] animate-pulse transition-transform","children":["$","$L13",null,{"src":"/images/main-logo.png","alt":"로딩 중...","width":120,"height":120,"className":"drop-shadow-lg"}]}],["$","p",null,{"className":"mt-6 animate-pulse text-lg font-bold text-gray-600","children":"Codefug Blog"}]]}]}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","0pWvvKQZ36I_-U6udpH8d",{"children":[["$","$L14",null,{"children":"$L15"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$16",[]],"s":false,"S":true}
17:"$Sreact.suspense"
18:I[2533,[],"AsyncMetadata"]
d:["$","$17",null,{"fallback":null,"children":["$","$L18",null,{"promise":"$@19"}]}]
10:null
15:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
f:null
19:{"metadata":[["$","title","0",{"children":"Codefug Blog"}],["$","meta","1",{"name":"description","content":"project experiences and development notes"}],["$","meta","2",{"property":"og:title","content":"Codefug Blog"}],["$","meta","3",{"property":"og:description","content":"project experiences and development notes"}],["$","meta","4",{"property":"og:url","content":"https://codefug-blog.vercel.app"}],["$","meta","5",{"property":"og:image","content":"http://localhost:3000/images/main-logo.png"}],["$","meta","6",{"property":"og:image:alt","content":"Codefug Blog"}],["$","meta","7",{"property":"og:type","content":"website"}],["$","meta","8",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","9",{"name":"twitter:title","content":"Codefug Blog"}],["$","meta","10",{"name":"twitter:description","content":"project experiences and development notes"}],["$","meta","11",{"name":"twitter:image","content":"http://localhost:3000/images/main-logo.png"}],["$","meta","12",{"name":"twitter:image:alt","content":"Codefug Blog"}],["$","link","13",{"rel":"icon","href":"/icon.ico?f00882ffa3186f37","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
12:{"metadata":"$19:metadata","error":null,"digest":"$undefined"}
1a:I[448,["893","static/chunks/893-1af1c230473151df.js","460","static/chunks/460-7903e3149ee4c004.js","252","static/chunks/252-c4d5671b15cb4929.js","880","static/chunks/app/posts/%5Bid%5D/page-a9de55f97c60b056.js"],"GtmPageView"]
1b:I[4329,["893","static/chunks/893-1af1c230473151df.js","460","static/chunks/460-7903e3149ee4c004.js","252","static/chunks/252-c4d5671b15cb4929.js","880","static/chunks/app/posts/%5Bid%5D/page-a9de55f97c60b056.js"],"default"]
b:["$","section",null,{"children":[["$","$L1a",null,{"slug":"2025-06-14"}],["$","header",null,{"className":"mb-8","children":[["$","div",null,{"className":"relative mb-6 h-[300px] w-full overflow-hidden rounded-xl sm:h-[400px] md:h-[450px]","children":[["$","$L13",null,{"src":"/images/2025-06-14/Pasted image 20250617224108.png","alt":"해시","fill":true,"sizes":"(max-width: 768px) 100vw, 1200px","priority":true,"className":"object-cover object-center transition-transform duration-500 hover:scale-105"}],["$","div",null,{"className":"absolute inset-0 bg-gradient-to-b from-transparent to-black/70"}],["$","div",null,{"className":"absolute left-4 top-4 flex flex-wrap gap-2 sm:left-6 sm:top-6","children":[["$","div","data-structure",{"className":"inline-flex items-center rounded-md border px-2.5 py-0.5 transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-white/90 text-xs font-medium text-gray-800 hover:bg-white sm:text-sm","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag mr-1 h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}]," ","data-structure"]}],["$","div","javascript",{"className":"inline-flex items-center rounded-md border px-2.5 py-0.5 transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-white/90 text-xs font-medium text-gray-800 hover:bg-white sm:text-sm","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag mr-1 h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}]," ","javascript"]}]]}]]}],["$","div",null,{"className":"mb-6 space-y-4","children":[["$","h1",null,{"className":"mb-0 text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-50 sm:text-4xl md:text-5xl","children":"해시"}],["$","div",null,{"className":"flex items-center justify-end gap-4 text-sm text-gray-600 dark:text-gray-400","children":["$","div",null,{"className":"flex items-center","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar-days mr-2 h-4 w-4","children":[["$","path","1cmpym",{"d":"M8 2v4"}],["$","path","4m81vk",{"d":"M16 2v4"}],["$","rect","1hopcy",{"width":"18","height":"18","x":"3","y":"4","rx":"2"}],["$","path","8toen8",{"d":"M3 10h18"}],["$","path","6423bh",{"d":"M8 14h.01"}],["$","path","1etili",{"d":"M12 14h.01"}],["$","path","1gbofw",{"d":"M16 14h.01"}],["$","path","lrp35t",{"d":"M8 18h.01"}],["$","path","mhygvu",{"d":"M12 18h.01"}],["$","path","kzsmim",{"d":"M16 18h.01"}],"$undefined"]}],["$","time",null,{"dateTime":"2025-06-14","children":"2025-06-14"}]]}]}],["$","p",null,{"className":"text-lg leading-relaxed text-gray-600 dark:text-gray-300 md:text-xl","children":"JS의 해시에 대해서 알아보자."}]]}],["$","div",null,{"className":"border-b border-gray-200 dark:border-gray-800"}]]}],["$","section",null,{"className":"lg:flex lg:items-baseline","children":[["$","$L1b",null,{}],["$","section",null,{"className":"max-w-full","children":[["$","p",null,{"children":"단순하게 데이터를 찾는다고 하면 순차 탐색을 생각할 수 있는데요. 이는 최악의 경우 모든 데이터를 살펴봐야 하기에 대용량 데이터를 다루기에는 적절하지 않죠."}],"\n",["$","p",null,{"children":["어떠한 값이 저장되는 위치를 어떤 규칙으로 정한다면 바로 접근해서 찾아낼 수 있을 텐데요. 이런 개념으로 탄생한 자료구조가 ",["$","code",null,{"children":"hash"}]," 입니다."]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"hash"}],"는 JS에서 Object로 쉽게 쓸 수 있지만 내부적으로는 해시 함수를 사용해서 변환한 값을 인덱스로 삼아서 키, 값으로 저장하는 방식으로 구현되어 있는데요. 더 자세하게 알아봅시다."]}],"\n",["$","blockquote",null,{"className":"bg-quote-yellow border-yellow-500 rounded-xl border-y border-r border-y-gray-400 border-r-gray-400 border-opacity-30 p-4 not-italic","children":[["$","div",null,{"className":"text-yellow-500 flex items-center gap-1 text-lg font-bold md:text-2xl","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-info","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","path","1dtifu",{"d":"M12 16v-4"}],["$","path","e9boi3",{"d":"M12 8h.01"}],"$undefined"]}],["$","div",null,{"children":"INFO"}]]}],["$","section",null,{"className":"text-sm font-semibold text-black md:text-base","children":["\n",["$","p",null,{"children":"해시는 키와 데이터를 일대일 대응하여 저장하므로 키를 통해 데이터에 바로 접근할 수 있습니다."}],"\n"]}]]}],"\n",["$","h1",null,{"id":0,"className":"hltr-red","children":"개념"}],"\n",["$","p",null,{"children":["해시는 우리의 일상 생활에서 정말 많이 사용하는 자료구조에요.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250617224108.png","alt":""}],"\n연락처는 이름 이라는 key에 대응되는 번호 라는 value 를 가진 ",["$","code",null,{"children":"hash"}],"로 볼 수 있죠. hash에서 key를 갖고 value를 찾기 위해서는 중간에 key를 해시값 또는 인덱스로 변환해주는 해시 함수가 필요합니다. 해시 함수에 대한 설명은 아래에서 더 자세히 하겠습니다. 우선 특징부터 살펴봅시다."]}],"\n",["$","h2",null,{"id":1,"className":"hltr-orange","children":"특징"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"해시는 단방향으로 동작합니다. 키를 통해 값을 찾을 수 있지만 값을 통해 키를 찾을 수는 없습니다."}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"O(1)"}],"의 시간 복잡도로 찾고자 하는 값을 바로 찾을 수 있습니다. 해시 함수에 의해서 key 자체가 인덱스가 되서 탐색 과정이 필요 없는 것이죠."]}],"\n",["$","li",null,{"children":"값을 인덱스로 사용하려면 적절한 변환 과정을 거쳐야 합니다."}],"\n"]}],"\n",["$","blockquote",null,{"className":"bg-quote-blue border-blue-500 rounded-xl border-y border-r border-y-gray-400 border-r-gray-400 border-opacity-30 p-4 not-italic","children":[["$","div",null,{"className":"text-blue-500 flex items-center gap-1 text-lg font-bold md:text-2xl","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-pencil","children":[["$","path","1a8usu",{"d":"M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"}],["$","path","1mk7zo",{"d":"m15 5 4 4"}],"$undefined"]}],["$","div",null,{"children":"단방향으로 동작하는 해시"}]]}],["$","section",null,{"className":"text-sm font-semibold text-black md:text-base","children":["\n",["$","p",null,{"children":"단방향으로만 동작하는 해시는 외부에 정보를 안전하게 제공한다는 특징이 있어 네트워크 보안에서 많이 활용됩니다."}],"\n"]}]]}],"\n",["$","p",null,{"children":["이름에 맞는 전화번호를 찾아야 할 때 hash가 없다고 해봅시다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618081621.png","alt":""}],"\n해시를 사용하지 않으면 위의 사진처럼 모든 배열을 순차 탐색해서 해당 이름을 찾은 후에 해당 인덱스에 맞는 또 다른 배열을 이용해서 전화번호를 찾아야 할 것입니다. 탐색 효율이 떨어지는 것을 볼 수 있습니다."]}],"\n",["$","p",null,{"children":["하지만 해시를 사용한다면 이야기가 달라집니다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618082006.png","alt":""}],"\n해시 함수를 통해서 특정 값이 있는 위치를 바로 찾을 수 있기 때문에 탐색 효율이 좋습니다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618082154.png","alt":""}]]}],"\n",["$","blockquote",null,{"className":"bg-quote-blue border-blue-500 rounded-xl border-y border-r border-y-gray-400 border-r-gray-400 border-opacity-30 p-4 not-italic","children":[["$","div",null,{"className":"text-blue-500 flex items-center gap-1 text-lg font-bold md:text-2xl","children":["$b:props:children:2:props:children:1:props:children:16:props:children:0:props:children:0",["$","div",null,{"children":"NOTE"}]]}],["$","section",null,{"className":"text-sm font-semibold text-black md:text-base","children":["\n",["$","p",null,{"children":"해시 테이블: 키와 대응한 값이 저장되어 있는 공간\nbucket: 해시 테이블의 각 데이터"}],"\n"]}]]}],"\n",["$","h2",null,{"id":2,"className":"hltr-orange","children":"해시의 특성을 활용하는 분야"}],"\n",["$","p",null,{"children":"해시는 단방향으로만 검색할 수 있는 대신 빠르게 원하는 값을 검색할 수 있습니다. 이러한 특징으로 인해 데이터를 저장하고 검색하거나, 보안이 필요한 때에 활용됩니다."}],"\n",["$","blockquote",null,{"className":"bg-quote-blue border-blue-500 rounded-xl border-y border-r border-y-gray-400 border-r-gray-400 border-opacity-30 p-4 not-italic","children":[["$","div",null,{"className":"text-blue-500 flex items-center gap-1 text-lg font-bold md:text-2xl","children":["$b:props:children:2:props:children:1:props:children:16:props:children:0:props:children:0",["$","div",null,{"children":"해시가 사용되는 실제 사례"}]]}],["$","section",null,{"className":"text-sm font-semibold text-black md:text-base","children":["\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"비밀번호 관리: 비밀번호를 저장할 때 해시 함수를 활용해서 비밀번호를 저장합니다."}],"\n",["$","li",null,{"children":"데이터베이스 인덱싱: 데이터베이스에 저장된 데이터를 효율적으로 검색할 때 해시를 활용합니다."}],"\n",["$","li",null,{"children":"블록체인: 블록체인의 각 블록은 이전 블록의 해시값을 포함하고 있으며, 이를 통해 데이터 무결성을 확인할 수 있습니다."}],"\n"]}],"\n"]}]]}],"\n",["$","h1",null,{"id":3,"className":"hltr-red","children":"구현"}],"\n",["$","p",null,{"children":"처음 설명했던 것처럼 JS에서는 Object만 사용해도 hash를 쓸 수 있는데요. hash의 원리를 이해하면 이 구조를 다른 좀 더 큰 계층에서도 사용할 수 있기에 알아는 두는 것이 멋진 개발자가 되는 길입니다."}],"\n",["$","h2",null,{"id":4,"className":"hltr-orange","children":"해시 함수"}],"\n",["$","p",null,{"children":"해시 함수를 구현에서 고려해야 하는 사항들이 있어요."}],"\n",["$","p",null,{"children":["첫번째로 해시 함수로 반환되는 값은 해시 테이블을 넘어선 안됩니다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618083156.png","alt":""}],"\n해시 함수의 반환 값이 인덱스로 되기 때문에 해시 함수의 반환값은 해시 테이블의 크기인 N보다 작은 0부터 N-1까지의 값이어야 해요."]}],"\n",["$","p",null,{"children":["두 번째로 해시 함수가 변환한 값의 충돌은 최대한 적게 발생해야 합니다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618083427.png","alt":""}],"\n해시 함수의 충돌이 안 날수는 없으나 최소한으로 줄이는 것이 좋아요."]}],"\n",["$","h3",null,{"id":5,"className":"hltr-yellow","children":"자주 사용하는 해시 함수"}],"\n",["$","p",null,{"children":"실제로는 어떤 해시 함수를 사용하는지 알아봅시다."}],"\n",["$","h4",null,{"id":6,"className":"hltr-green","children":"숫자 해시 함수"}],"\n",["$","h5",null,{"id":7,"className":"hltr-cyan","children":"나눗셈법"}],"\n",["$","p",null,{"children":"나눗셈법은 가장 떠올리기 쉬워요. 키를 소수로 나눈 나머지를 인덱스로 활용하는 방법입니다."}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"h(x) = x mod k ( x%k, k는 소수로 해야 충돌이 적어요. )"}],"\n"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618084825.png","alt":""}]}],"\n",["$","blockquote",null,{"className":"bg-quote-blue border-blue-500 rounded-xl border-y border-r border-y-gray-400 border-r-gray-400 border-opacity-30 p-4 not-italic","children":[["$","div",null,{"className":"text-blue-500 flex items-center gap-1 text-lg font-bold md:text-2xl","children":["$b:props:children:2:props:children:1:props:children:16:props:children:0:props:children:0",["$","div",null,{"children":"소수를 사용하는 방식이 충돌이 적은 이유"}]]}],["$","section",null,{"className":"text-sm font-semibold text-black md:text-base","children":["\n",["$","p",null,{"children":["소수 대신 15를 사용해봅시다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618084931.png","alt":""}],"\n15를 적용하면 위 그림처럼 규칙적으로 계속 같은 해시값이 반복되는 것을 확인하실 수 있습니다. k의 약수 중 하나인 3, 5의 배수면 전부 이런 형태로 진행되죠."]}],"\n",["$","p",null,{"children":["이유는 간단합니다. N의 약수 중 하나를 M이라고 한다면 ",["$","code",null,{"children":"M * K = N"}],"이 되는 수가 무조건 있기 때문입니다. 그렇기에 K가 1 또는 자기 자신만 있는 수인 소수를 사용하는 것입니다."]}],"\n"]}]]}],"\n",["$","p",null,{"children":"나눗셈 법을 사용하면 테이블의 크기는 나눗셈 법에서 사용하는 소수 K가 됩니다. 아주 많은 데이터를 저장해야 한다면 그만큼 큰 소수를 구해야 하는데요. 현재로써는 그 수를 구하는 효율적인 방법이 없다고 합니다. 그래서 다른 방식들도 생겨나게 되었어요."}],"\n",["$","h5",null,{"id":8,"className":"hltr-cyan","children":"곱셈법"}],"\n",["$","p",null,{"children":"곱셈법에서는 나눗셈법과 비슷하게 모듈러 연산을 활용하지만 소수를 활용하지 않아요."}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"h(x) = ( ( ( x _ A ) mod 1 ) _ m) (m은 최대 버킷의 개수, A는 황금비)"}],"\n"]}],"\n",["$","p",null,{"children":"황금비는 수학적으로 임의의 길이를 두 부분으로 나누었을 때, 전체와 긴 부분의 비율이 긴 부분과 짧은 부분의 비율과 같은 비율을 뜻합니다. 지금은 계산에서 실제 황금비인 1.618033...을 사용하지 않고 소수부인 0.618033... 만 사용하겠습니다."}],"\n",["$","p",null,{"children":"공식을 진행해봅시다."}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"x * A: x와 황금비 A를 더합니다."}],"\n"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618085741.png","alt":""}]}],"\n",["$","ol",null,{"start":"2","children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"( ( x * A ) mod 1 ): 정수 부분을 버리고 소수 부분만 취합니다. ( ex) 3.1523이면 0.1523만 남게 된다. )"}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618085806.png","alt":""}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["( ( ( x _ A ) mod 1 ) _ m): 최대 버킷의 개수인 m을 곱해서 해시 테이블에 매핑합니다. 2단계에서 소수 부분만 취했기 때문에 0 ~ 0.99... 까지의 범위에 있었는데 여기에 m을 곱해줘서 0 ~ m-1 의 범위를 갖게 되었습니다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250618125004.png","alt":""}],"\n곱셈법은 소수 대신 황금비를 사용하여 로직을 구현합니다. 따라서 테이블의 크기가 커져도 추가 작업이 필요 없죠."]}],"\n"]}],"\n"]}],"\n",["$","h4",null,{"id":9,"className":"hltr-green","children":"문자열 해시 함수"}],"\n",["$","p",null,{"children":"키의 자료형이 문자열인 해시를 만들어 봅시다. 문자열 해싱은 문자열의 문자를 숫 자로 변환하고 이 숫자들을 다항식의 값으로 변환해서 해싱합니다."}],"\n",["$","p",null,{"children":["이를 위해 ",["$","code",null,{"children":"polynomial rolling method"}],"을 사용합니다."]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"hash(s) = (s[0] + s[1] _ p + s[2]_ p² + ... + s[n− 1]* p\"-1) mod m ( p는 31, m은 해시 테이블 최대 크기 )"}],"\n"]}],"\n",["$","blockquote",null,{"className":"bg-quote-blue border-blue-500 rounded-xl border-y border-r border-y-gray-400 border-r-gray-400 border-opacity-30 p-4 not-italic","children":[["$","div",null,{"className":"text-blue-500 flex items-center gap-1 text-lg font-bold md:text-2xl","children":["$b:props:children:2:props:children:1:props:children:16:props:children:0:props:children:0",["$","div",null,{"children":"메르센 소수"}]]}],["$","section",null,{"className":"text-sm font-semibold text-black md:text-base","children":["\n",["$","p",null,{"children":["2",["$","sup",null,{"children":"N"}],"-1 형식으로 표시할 수 있는 숫자 중 소수인 수를 말한다."]}],"\n",["$","p",null,{"children":"해시에서 충돌을 줄이는데 효과적이라는 연구 결과가 있다."}],"\n"]}]]}],"\n",["$","p",null,{"children":"동작 과정은 다음과 같아요."}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["a부터 z까지 숫자와 매치한 표와 키\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250619081042.png","alt":""}]]}],"\n",["$","li",null,{"children":["표에 맞춰서 계산 ( s",["$","code",null,{"children":"[0]*p"}],["$","sup",null,{"children":"0"}],"은 ",["$","code",null,{"children":"1*1"}],"입니다. )\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250619081120.png","alt":""}]]}],"\n",["$","li",null,{"children":["그 이후인 ",["$","code",null,{"children":"s[1]"}],"부터는 테이블의 크기를 넘어간 수가 나오기 시작합니다. 우선 전부 순회해줍니다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250619081147.png","alt":""}]]}],"\n",["$","li",null,{"children":["모든 수들을 순회하고 나면 해당 값들을 전부 더하고 해시 테이블의 크기로 모듈러 연산을 해서 해시 테이블의 크기에 맞춰줍니다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250619081428.png","alt":""}],"\n위 과정을 통하면 문자열을 해싱 함수를 통해 숫자로 만들 수 있는데요. 이때 문제는 ",["$","code",null,{"children":"apple"}],"이라는 단순한 문자열임에도 너무 큰 수가 결과로 나온 것입니다. 여기서 더 문자열이 커지게 되면 오버플로우가 발생할 수 있어요. 이를 위해 다음의 연산을 수행해줍니다."]}],"\n"]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"(a+b)%c=(a%c+b%c)%c"}],"\n"]}],"\n",["$","p",null,{"children":"간단하게 설명하면 최종값을 모듈러 연산하는 것이 아니라 각 계산 과정마다 모듈러 연산을 수행하는 것입니다. 해시 함수가 직접 적용하면 다음의 형태입니다"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"hash(s) =(s[0]%m+s[1]_ p%m+s[2]_ p² %m ...... s[n -1]* p(n-1)%m)%m"}],"\n"]}],"\n",["$","h2",null,{"id":10,"className":"hltr-orange","children":"해시 함수 충돌 처리"}],"\n",["$","p",null,{"children":["서로 다른 키에 대해서 해시 함수의 결괏값이 같으면 ",["$","code",null,{"children":"충돌"}],"이라고 합니다. 하나의 버킷에는 2개의 값을 넣을 수 없기 때문에 해시 테이블을 관리할 때는 반드시 충돌 처리를 해야 합니다."]}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250619082027.png","alt":""}],"\n이를 해결하기 위해선 다양한 방법이 존재합니다."]}],"\n",["$","h3",null,{"id":11,"className":"hltr-yellow","children":"체이닝으로 처리"}],"\n",["$","p",null,{"children":"연결리스트로 같은 해시값을 가지는 데이터를 연결합니다."}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250619082251.png","alt":""}],"\n해시 함수를 거친 반환값이 충돌한다면 해시 테이블의 원소 자체를 연결 리스트로 만들어 연결함으로써 문제를 해결할 수 있어요. 하지만 여기에는 두가지 단점이 존재합니다."]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"해시 테이블 공간 활용성: 충돌이 일어날수록 해시 테이블 공간을 덜 사용하고 연결 리스트의 길이가 점점 길어질 수 있습니다."}],"\n",["$","li",null,{"children":["검색 성능 저하: 충돌이 일어날수록 순회해야 하는 연결리스트가 커지면서 결국 ",["$","code",null,{"children":"O(N)"}],"의 시간복잡도를 갖게 됩니다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250619082613.png","alt":""}]]}],"\n"]}],"\n",["$","h3",null,{"id":12,"className":"hltr-yellow","children":"개방 주소법으로 처리"}],"\n",["$","p",null,{"children":"빈 버킷을 찾아 충돌값을 삽입하는 방법입니다. 해시 테이블을 최대한 활용하므로 체이닝보다 메모리를 더 효율적으로 사용하게 되죠."}],"\n",["$","h4",null,{"id":13,"className":"hltr-green","children":"선형 탐사 방식"}],"\n",["$","p",null,{"children":"충돌이 발생하면 다른 빈 버킷을 찾을 때까지 일정한 간격으로 이동합니다. (보통 간격은 1이다.)"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"h(k,i) = ( h(k) + i ) mod m (m은 수용할 수 있는 최대 버킷, i는 간격)"}],"\n"]}],"\n",["$","p",null,{"children":["선형 탐사 시 테이블의 범위를 넘으면 안 되므로 모듈러 연산을 적용합니다.\n",["$","img",null,{"src":"/images/2025-06-14/Pasted%20image%2020250619082842.png","alt":""}],"\n물론 이 방식도 완벽할 순 없어요. 1칸씩 내려가다 보면 결국 충돌이 발생한 값끼리 모이는 영역이 생겨요. 이를 클러스터(cluster)라고 합니다. 클러스터가 생길 때마다 해시값은 겹칠 확률이 더 올라갑니다."]}],"\n",["$","blockquote",null,{"className":"bg-quote-blue border-blue-500 rounded-xl border-y border-r border-y-gray-400 border-r-gray-400 border-opacity-30 p-4 not-italic","children":[["$","div",null,{"className":"text-blue-500 flex items-center gap-1 text-lg font-bold md:text-2xl","children":["$b:props:children:2:props:children:1:props:children:16:props:children:0:props:children:0",["$","div",null,{"children":"NOTE"}]]}],["$","section",null,{"className":"text-sm font-semibold text-black md:text-base","children":["\n",["$","p",null,{"children":"이를 방지하기 위해 제곱수만큼 이동하는 방법도 있지만 문제의 확률이 작아졌을 뿐 없어지진 않아요."}],"\n"]}]]}],"\n",["$","h4",null,{"id":14,"className":"hltr-green","children":"이중 해싱 방식"}],"\n",["$","p",null,{"children":"해시 함수를 2개 사용하는 방식이며 때에 따라 N개를 사용하기도 해서 좀 더 견고한 해싱을 하는 방식이에요."}],"\n",["$","p",null,{"children":"두번째 해시 함수의 역할은 첫번째 해시 함수로 충돌이 발생했을 때 어떻게 할지 정하는 역할입니다."}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":["h(k,i) = (h",["$","sub",null,{"children":"1"}],"(k) + i",["$","code",null,{"children":"*"}],"h",["$","sub",null,{"children":"2"}],"(k)) mod m (h",["$","sub",null,{"children":"n"}],"은 n차 해시)"]}],"\n"]}],"\n",["$","p",null,{"children":"선형 탐사와 비슷하게 더하는 방식이지만 클러스터를 줄이기 위해서 m을 제곱수나 소수로 합니다. 주어지는 키마다 점프하는 위치를 해시 함수로 다르게 해서 클러스터 형성을 최대한 피하기 위함입니다."}]]}]]}]]}]
